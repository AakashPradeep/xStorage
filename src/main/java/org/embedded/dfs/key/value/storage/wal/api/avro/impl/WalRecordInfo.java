/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.embedded.dfs.key.value.storage.wal.api.avro.impl;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WalRecordInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8701649277004343580L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WalRecordInfo\",\"namespace\":\"org.embedded.dfs.key.value.storage.wal.api.avro.impl\",\"fields\":[{\"name\":\"sequenceId\",\"type\":\"long\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"operation\",\"symbols\":[\"DELETE\",\"PUT\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long sequenceId;
  @Deprecated public long timestamp;
  @Deprecated public java.nio.ByteBuffer key;
  @Deprecated public java.nio.ByteBuffer value;
  @Deprecated public org.embedded.dfs.key.value.storage.wal.api.avro.impl.operation operation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WalRecordInfo() {}

  /**
   * All-args constructor.
   * @param sequenceId The new value for sequenceId
   * @param timestamp The new value for timestamp
   * @param key The new value for key
   * @param value The new value for value
   * @param operation The new value for operation
   */
  public WalRecordInfo(java.lang.Long sequenceId, java.lang.Long timestamp, java.nio.ByteBuffer key, java.nio.ByteBuffer value, org.embedded.dfs.key.value.storage.wal.api.avro.impl.operation operation) {
    this.sequenceId = sequenceId;
    this.timestamp = timestamp;
    this.key = key;
    this.value = value;
    this.operation = operation;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sequenceId;
    case 1: return timestamp;
    case 2: return key;
    case 3: return value;
    case 4: return operation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sequenceId = (java.lang.Long)value$; break;
    case 1: timestamp = (java.lang.Long)value$; break;
    case 2: key = (java.nio.ByteBuffer)value$; break;
    case 3: value = (java.nio.ByteBuffer)value$; break;
    case 4: operation = (org.embedded.dfs.key.value.storage.wal.api.avro.impl.operation)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sequenceId' field.
   * @return The value of the 'sequenceId' field.
   */
  public java.lang.Long getSequenceId() {
    return sequenceId;
  }

  /**
   * Sets the value of the 'sequenceId' field.
   * @param value the value to set.
   */
  public void setSequenceId(java.lang.Long value) {
    this.sequenceId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.nio.ByteBuffer getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.nio.ByteBuffer value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.nio.ByteBuffer getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.nio.ByteBuffer value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public org.embedded.dfs.key.value.storage.wal.api.avro.impl.operation getOperation() {
    return operation;
  }

  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(org.embedded.dfs.key.value.storage.wal.api.avro.impl.operation value) {
    this.operation = value;
  }

  /**
   * Creates a new WalRecordInfo RecordBuilder.
   * @return A new WalRecordInfo RecordBuilder
   */
  public static org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder newBuilder() {
    return new org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder();
  }

  /**
   * Creates a new WalRecordInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WalRecordInfo RecordBuilder
   */
  public static org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder newBuilder(org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder other) {
    return new org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder(other);
  }

  /**
   * Creates a new WalRecordInfo RecordBuilder by copying an existing WalRecordInfo instance.
   * @param other The existing instance to copy.
   * @return A new WalRecordInfo RecordBuilder
   */
  public static org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder newBuilder(org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo other) {
    return new org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder(other);
  }

  /**
   * RecordBuilder for WalRecordInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WalRecordInfo>
    implements org.apache.avro.data.RecordBuilder<WalRecordInfo> {

    private long sequenceId;
    private long timestamp;
    private java.nio.ByteBuffer key;
    private java.nio.ByteBuffer value;
    private org.embedded.dfs.key.value.storage.wal.api.avro.impl.operation operation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sequenceId)) {
        this.sequenceId = data().deepCopy(fields()[0].schema(), other.sequenceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.key)) {
        this.key = data().deepCopy(fields()[2].schema(), other.key);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.operation)) {
        this.operation = data().deepCopy(fields()[4].schema(), other.operation);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WalRecordInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sequenceId)) {
        this.sequenceId = data().deepCopy(fields()[0].schema(), other.sequenceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.key)) {
        this.key = data().deepCopy(fields()[2].schema(), other.key);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.operation)) {
        this.operation = data().deepCopy(fields()[4].schema(), other.operation);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'sequenceId' field.
      * @return The value.
      */
    public java.lang.Long getSequenceId() {
      return sequenceId;
    }

    /**
      * Sets the value of the 'sequenceId' field.
      * @param value The value of 'sequenceId'.
      * @return This builder.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder setSequenceId(long value) {
      validate(fields()[0], value);
      this.sequenceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sequenceId' field has been set.
      * @return True if the 'sequenceId' field has been set, false otherwise.
      */
    public boolean hasSequenceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sequenceId' field.
      * @return This builder.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder clearSequenceId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder setKey(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.key = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder clearKey() {
      key = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder setValue(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.value = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder clearValue() {
      value = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.operation getOperation() {
      return operation;
    }

    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder setOperation(org.embedded.dfs.key.value.storage.wal.api.avro.impl.operation value) {
      validate(fields()[4], value);
      this.operation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public org.embedded.dfs.key.value.storage.wal.api.avro.impl.WalRecordInfo.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public WalRecordInfo build() {
      try {
        WalRecordInfo record = new WalRecordInfo();
        record.sequenceId = fieldSetFlags()[0] ? this.sequenceId : (java.lang.Long) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.key = fieldSetFlags()[2] ? this.key : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.value = fieldSetFlags()[3] ? this.value : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        record.operation = fieldSetFlags()[4] ? this.operation : (org.embedded.dfs.key.value.storage.wal.api.avro.impl.operation) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
